#!/usr/bin/env node

var Contributors  = require('../')
  , package       = require('../package.json')
  , program       = require('commander')
  , Progress      = require('progress')
  , path          = require('path')
  , fs            = require('fs')
  , util          = require('util')

program
  .version(package.version)
  .option('-d, --dir <path>', 'specified the dir of repo')
  .option('-f, --format <md|json|plain>', 'specified output format', 'md')
  .option('-o, --output [AUTHORS.md]', 'writes to file')
  .parse(process.argv)

var dir    = program.dir || process.cwd()
  , format = (program.format && -1 != ['md', 'json', 'plain'].indexOf(program.format))
           ? program.format
           : 'md'
  , output = program.output
           ? resolve(program.output, format)
           : null

var progressBar

new Contributors()
  .on('fetching', function(count) {
    progressBar = new Progress('fetching [:bar] :current / :total ...', {
        complete: '='
      , incomplete: ' '
      , width: 20
      , total: count
    })
    progressBar.tick(0)
  })
  .on('fetched', function() {
    progressBar.tick(1)
  })
  .on('done', function(result) {
    switch (format) {
      case 'md':
        result = generateMd(result)
        break
      case 'plain':
        result = generatePlain(result)
        break
      default:
        break
    }

    if ('json' == format) {
      console.log(util.inspect(result, null, null, true))
    } else {
      console.log(result)
    }

    if (output) {
      fs.exists(path.dirname(output), function(ex) {
        if (!ex) {
          console.error('')
          console.error('Error: output destination does not exists.')
          return process.exit(-1)
        }

        if ('json' == format) {
          result = JSON.stringify(result)
        } else {
          result += "\n"
        }

        fs.writeFile(output, result, function(err) {
          if (err) {
            console.error('')
            console.error(formatError(err))
            return process.exit(-1)
          } else {
            return process.exit(0)
          }
        })
      })
    } else {
      return process.exit(0)
    }
  })
  .on('error', function(err) {
    console.error('')
    console.error(formatError(err))
    return process.exit(-1)
  })
  .fetch(dir)

function generateMd(json) {
  var lead = 'Ordered by date of first contribution.'
           + ' [Auto-generated](https://github.com/xingrz/node-contributors) on '
           + new Date(json.generatedAt).toUTCString() + ".\n\n"

  return lead + json.contributors.map(function(i) {
    return 'undefined' === typeof i.web
         ? util.format('- %s', i.name)
         : util.format('- [%s](%s)', i.name, i.web)
  }).join("\n")
}

function generatePlain(json) {
  var lead = "# Ordered by date of first contribution.\n"
           + "# Auto-generated by 'contributors' on "
           + new Date(json.generatedAt).toUTCString() + ".\n"
           + "# https://github.com/xingrz/node-contributors\n\n"

  return lead + json.contributors.map(function(i) {
    return 'undefined' === typeof i.web
         ? util.format('%s <%s>', i.name, i.email)
         : util.format('%s <%s> (%s)', i.name, i.email, i.web)
  }).join("\n")
}

function resolve(name, format) {
  if ('string' == typeof name) {
    return path.resolve(name)
  } else {
    switch (format) {
      case 'md': return 'AUTHORS.md'
      case 'json': return 'authors.json'
      case 'plain': return 'AUTHORS'
    }
  }
}

function formatError(err) {
  return err.message
       ? util.format('%s: %s', err.name || 'Error', err.message)
       : err
}
